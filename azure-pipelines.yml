# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DockerCompose@0
  displayName: 'Build azure-devops-janitor images'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'build'
    arguments: '--build-arg PAT=$(System.AccessToken)'
- task: ECRPushImage@1  
  displayName: 'Push azure-devops-janitor-api image to ECR'
  inputs:
    awsCredentials: 'DeveloperAutomation ECR'
    regionName: 'eu-west-1'
    imageSource: 'imagename'
    sourceImageName: 'azure-devops-janitor-api'
    repositoryName: 'dfds.developerautomation-xavgy.azure-devops-janitor'
    pushTag: 'azure-devops-janitor-api-$(Build.BuildId)'
- task: ECRPushImage@1
  displayName: 'Push azure-devops-janitor-event-consumer image to ECR'
  inputs:
    awsCredentials: 'DeveloperAutomation ECR'
    regionName: 'eu-west-1'
    imageSource: 'imagename'
    sourceImageName: 'azure-devops-janitor-event-consumer'
    repositoryName: 'dfds.developerautomation-xavgy.azure-devops-janitor'
    pushTag: 'azure-devops-janitor-event-consumer-$(Build.BuildId)'
- task: ECRPushImage@1
  displayName: 'Push azure-devops-janitor-event-forwarder image to ECR'
  inputs:
    awsCredentials: 'DeveloperAutomation ECR'
    regionName: 'eu-west-1'
    imageSource: 'imagename'
    sourceImageName: 'azure-devops-janitor-event-forwarder'
    repositoryName: 'dfds.developerautomation-xavgy.azure-devops-janitor'
    pushTag: 'azure-devops-janitor-event-forwarder-$(Build.BuildId)'
  
# Replace token values in yaml files with pipeline variables
- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace tokens in k8s manifests'
  inputs:
    rootDirectory: '$(Build.SourcesDirectory)/k8s/'
    targetFiles: '*.yaml'
    tokenPrefix: '$('
    tokenSuffix: ')'

# Apply Kubernetes manifests
- task: Kubernetes@1
  displayName: 'Apply k8s manifests'
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: 'Kubernetes-Developer-Automation-Deploy'
    namespace: 'developerautomation-xavgy'
    command: apply
    arguments: '-f $(Build.SourcesDirectory)/k8s/'